#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <Adafruit_NeoPixel.h>

#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64

#define OLED_RESET -1
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

#define BUTTON_MINUS_1 32
#define BUTTON_PLUS_1 33
#define BUTTON_PLUS_3 25
#define BUTTON_PLUS_5 26
#define BUTTON_NEXT 27

#define LED_PIN 14
#define LED_COUNT 24
Adafruit_NeoPixel strip(LED_COUNT, LED_PIN, NEO_GRB + NEO_KHZ800);

int numberOfPlayers = 1;
int currentPlayer = 1;
int playerScores[8] = {0};
bool gameOver = false;

enum GameMode { GAME_40_POINTS, GAME_22_POINTS };
int selectedGame = GAME_40_POINTS;
bool gameSelected = false;

// Bitmap image data for '22 point' game
const unsigned char epd_bitmap_gameMode22[] PROGMEM = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x1e, 0x3f, 0xb8, 0x3f, 0x8f, 0x9f, 0xf0, 0x3e, 0x06, 0x0e, 0x1e, 0xff, 0x00, 0x00,
    0x00, 0x00, 0x3f, 0x3f, 0xb8, 0x3f, 0x9f, 0xdf, 0xf0, 0x7f, 0x0f, 0x0e, 0x1e, 0xff, 0x00, 0x00,
    0x00, 0x00, 0x73, 0xb8, 0x38, 0x38, 0x18, 0xc3, 0x80, 0xe7, 0x0f, 0x0f, 0x1e, 0xe0, 0x00, 0x00,
    0x00, 0x00, 0x71, 0xb8, 0x38, 0x38, 0x38, 0xe3, 0x80, 0xe3, 0x8f, 0x0f, 0x3e, 0xe0, 0x00, 0x00,
    0x00, 0x00, 0x78, 0x38, 0x38, 0x38, 0x38, 0xe3, 0x80, 0xe0, 0x1f, 0x8f, 0x3e, 0xe0, 0x00, 0x00,
    0x00, 0x00, 0x3e, 0x3f, 0xb8, 0x3f, 0xb8, 0x03, 0x80, 0xe0, 0x1f, 0x8f, 0x3e, 0xfe, 0x00, 0x00,
    0x00, 0x00, 0x1f, 0x3f, 0xb8, 0x3f, 0xb8, 0x03, 0x80, 0xef, 0x99, 0x8d, 0xbe, 0xfe, 0x00, 0x00,
    0x00, 0x00, 0x03, 0xb8, 0x38, 0x38, 0x38, 0x03, 0x80, 0xef, 0xb9, 0xcd, 0xee, 0xe0, 0x00, 0x00,
    0x00, 0x00, 0x73, 0xb8, 0x38, 0x38, 0x38, 0xe3, 0x80, 0xe3, 0xbf, 0xcd, 0xee, 0xe0, 0x00, 0x00,
    0x00, 0x00, 0x73, 0xb8, 0x38, 0x38, 0x18, 0xe3, 0x80, 0xe3, 0xbf, 0xcd, 0xee, 0xe0, 0x00, 0x00,
    0x00, 0x00, 0x3f, 0x3f, 0xbf, 0xbf, 0x9f, 0xc3, 0x80, 0x7f, 0xb0, 0xec, 0xee, 0xff, 0x00, 0x00,
    0x00, 0x00, 0x1e, 0x3f, 0xbf, 0xbf, 0x8f, 0x83, 0x80, 0x3e, 0x70, 0xec, 0xce, 0xff, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00,
    0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00,
    0x00, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xc0, 0x00,
    0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00,
    0x00, 0x06, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x60, 0x00,
    0x00, 0x06, 0x00, 0x00, 0x01, 0x9f, 0xc7, 0x87, 0xe7, 0xfb, 0x8e, 0xc0, 0x00, 0x00, 0x60, 0x00,
    0x00, 0x06, 0x00, 0x00, 0x01, 0x9f, 0xdf, 0xc7, 0xf7, 0xfb, 0x8c, 0xc0, 0x00, 0x00, 0x60, 0x00,
    0x00, 0x06, 0x00, 0x00, 0x01, 0x98, 0x1c, 0xe6, 0x70, 0xe1, 0xdd, 0x80, 0x00, 0x00, 0x60, 0x00,
    0x00, 0x06, 0x00, 0x00, 0x00, 0x18, 0x18, 0xe6, 0x38, 0xe1, 0xdc, 0x00, 0x00, 0x00, 0x60, 0x00,
    0x00, 0x06, 0x00, 0x00, 0x00, 0x18, 0x38, 0x66, 0x38, 0xe0, 0xf8, 0x00, 0x00, 0x00, 0x60, 0x00,
    0x00, 0x06, 0x00, 0x00, 0x00, 0x1f, 0xb8, 0x66, 0x70, 0xe0, 0xf8, 0x00, 0x00, 0x00, 0x60, 0x00,
    0x00, 0x06, 0x00, 0x00, 0x00, 0x1f, 0xb8, 0x67, 0xf0, 0xe0, 0xf0, 0x00, 0x00, 0x00, 0x60, 0x00,
    0x00, 0x06, 0x00, 0x00, 0x00, 0x18, 0x38, 0x67, 0xe0, 0xe0, 0x70, 0x00, 0x00, 0x00, 0x60, 0x00,
    0x00, 0x06, 0x00, 0x00, 0x00, 0x18, 0x18, 0xe6, 0xe0, 0xe0, 0x70, 0x00, 0x00, 0x00, 0x60, 0x00,
    0x00, 0x06, 0x00, 0x00, 0x00, 0x18, 0x1c, 0xe6, 0x70, 0xe0, 0x70, 0x00, 0x00, 0x00, 0x60, 0x00,
    0x00, 0x06, 0x00, 0x00, 0x00, 0x18, 0x1f, 0xc6, 0x70, 0xe0, 0x70, 0x00, 0x00, 0x00, 0x60, 0x00,
    0x00, 0x06, 0x00, 0x00, 0x00, 0x18, 0x0f, 0x86, 0x38, 0xe0, 0x70, 0x00, 0x00, 0x00, 0x60, 0x00,
    0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00,
    0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00,
    0x00, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xc0, 0x00,
    0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00,
    0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00,
    0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00,
    0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00,
    0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00,
    0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfb, 0xff, 0xff, 0x9f, 0xff, 0xe0, 0x00,
    0x00, 0x07, 0xff, 0xff, 0x0f, 0x39, 0xcf, 0x0e, 0x79, 0xfb, 0xc7, 0xc3, 0x9f, 0xff, 0xe0, 0x00,
    0x00, 0x07, 0xff, 0xfe, 0x07, 0x39, 0xce, 0x06, 0x71, 0xfb, 0x83, 0x81, 0x9f, 0xff, 0xe0, 0x00,
    0x00, 0x07, 0xff, 0xfc, 0xe3, 0x39, 0xcc, 0xe6, 0x63, 0xfb, 0x31, 0x99, 0xbf, 0xff, 0xe0, 0x00,
    0x00, 0x07, 0xff, 0xfc, 0xf3, 0x39, 0xcc, 0xf2, 0x67, 0xff, 0x39, 0x99, 0xff, 0xff, 0xe0, 0x00,
    0x00, 0x07, 0xff, 0xfc, 0xf3, 0x39, 0xcc, 0xfe, 0x47, 0xff, 0xf9, 0xf9, 0xff, 0xff, 0xe0, 0x00,
    0x00, 0x07, 0xff, 0xfc, 0xf3, 0x39, 0xcc, 0xfe, 0x0f, 0xff, 0xf3, 0xf9, 0xff, 0xff, 0xe0, 0x00,
    0x00, 0x07, 0xff, 0xfc, 0xf3, 0x39, 0xcc, 0xfe, 0x07, 0xff, 0xe3, 0xf3, 0xff, 0xff, 0xe0, 0x00,
    0x00, 0x07, 0xff, 0xfc, 0xf3, 0x39, 0xcc, 0xfe, 0x07, 0xff, 0xc7, 0xe7, 0xff, 0xff, 0xe0, 0x00,
    0x00, 0x07, 0xff, 0xfc, 0xf3, 0x39, 0xcc, 0xf2, 0x23, 0xff, 0xcf, 0xc7, 0xff, 0xff, 0xe0, 0x00,
    0x00, 0x07, 0xff, 0xfc, 0xe3, 0x39, 0xcc, 0xe6, 0x73, 0xff, 0x9f, 0x8f, 0xff, 0xff, 0xe0, 0x00,
    0x00, 0x07, 0xff, 0xfe, 0x07, 0x01, 0xce, 0x06, 0x71, 0xff, 0x01, 0x81, 0xff, 0xff, 0xe0, 0x00,
    0x00, 0x07, 0xff, 0xff, 0x07, 0xc3, 0xcf, 0x0e, 0x79, 0xff, 0x01, 0x81, 0xff, 0xff, 0xe0, 0x00,
    0x00, 0x07, 0xff, 0xff, 0xe3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00,
    0x00, 0x03, 0xff, 0xff, 0xf7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00,
    0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00,
    0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00,
    0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

// Bitmap image data for '40 point' game
const unsigned char epd_bitmap_gameMode40[] PROGMEM = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x1e, 0x3f, 0xb8, 0x3f, 0x8f, 0x9f, 0xf0, 0x3e, 0x06, 0x0e, 0x1e, 0xff, 0x00, 0x00,
    0x00, 0x00, 0x3f, 0x3f, 0xb8, 0x3f, 0x9f, 0xdf, 0xf0, 0x7f, 0x0f, 0x0e, 0x1e, 0xff, 0x00, 0x00,
    0x00, 0x00, 0x73, 0xb8, 0x38, 0x38, 0x18, 0xc3, 0x80, 0xe7, 0x0f, 0x0f, 0x1e, 0xe0, 0x00, 0x00,
    0x00, 0x00, 0x71, 0xb8, 0x38, 0x38, 0x38, 0xe3, 0x80, 0xe3, 0x8f, 0x0f, 0x3e, 0xe0, 0x00, 0x00,
    0x00, 0x00, 0x78, 0x38, 0x38, 0x38, 0x38, 0xe3, 0x80, 0xe0, 0x1f, 0x8f, 0x3e, 0xe0, 0x00, 0x00,
    0x00, 0x00, 0x3e, 0x3f, 0xb8, 0x3f, 0xb8, 0x03, 0x80, 0xe0, 0x1f, 0x8f, 0x3e, 0xfe, 0x00, 0x00,
    0x00, 0x00, 0x1f, 0x3f, 0xb8, 0x3f, 0xb8, 0x03, 0x80, 0xef, 0x99, 0x8d, 0xbe, 0xfe, 0x00, 0x00,
    0x00, 0x00, 0x03, 0xb8, 0x38, 0x38, 0x38, 0x03, 0x80, 0xef, 0xb9, 0xcd, 0xee, 0xe0, 0x00, 0x00,
    0x00, 0x00, 0x73, 0xb8, 0x38, 0x38, 0x38, 0xe3, 0x80, 0xe3, 0xbf, 0xcd, 0xee, 0xe0, 0x00, 0x00,
    0x00, 0x00, 0x73, 0xb8, 0x38, 0x38, 0x18, 0xe3, 0x80, 0xe3, 0xbf, 0xcd, 0xee, 0xe0, 0x00, 0x00,
    0x00, 0x00, 0x3f, 0x3f, 0xbf, 0xbf, 0x9f, 0xc3, 0x80, 0x7f, 0xb0, 0xec, 0xee, 0xff, 0x00, 0x00,
    0x00, 0x00, 0x1e, 0x3f, 0xbf, 0xbf, 0x8f, 0x83, 0x80, 0x3e, 0x70, 0xec, 0xce, 0xff, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00,
    0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00,
    0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00,
    0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00,
    0x00, 0x07, 0xff, 0xff, 0xff, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xe0, 0x00,
    0x00, 0x07, 0xff, 0xff, 0xfe, 0x60, 0x78, 0x78, 0x38, 0x04, 0x71, 0x3f, 0xff, 0xff, 0xe0, 0x00,
    0x00, 0x07, 0xff, 0xff, 0xfe, 0x60, 0x70, 0x38, 0x08, 0x06, 0x73, 0x7f, 0xff, 0xff, 0xe0, 0x00,
    0x00, 0x07, 0xff, 0xff, 0xfe, 0x67, 0xe7, 0x19, 0xcf, 0x3e, 0x63, 0x7f, 0xff, 0xff, 0xe0, 0x00,
    0x00, 0x07, 0xff, 0xff, 0xff, 0xe7, 0xe7, 0x99, 0xcf, 0x3f, 0x27, 0xff, 0xff, 0xff, 0xe0, 0x00,
    0x00, 0x07, 0xff, 0xff, 0xff, 0xe7, 0xe7, 0x99, 0xcf, 0x3f, 0x27, 0xff, 0xff, 0xff, 0xe0, 0x00,
    0x00, 0x07, 0xff, 0xff, 0xff, 0xe0, 0x67, 0x99, 0xcf, 0x3f, 0x0f, 0xff, 0xff, 0xff, 0xe0, 0x00,
    0x00, 0x07, 0xff, 0xff, 0xff, 0xe0, 0x67, 0x98, 0x0f, 0x3f, 0x8f, 0xff, 0xff, 0xff, 0xe0, 0x00,
    0x00, 0x07, 0xff, 0xff, 0xff, 0xe7, 0xe7, 0x98, 0x1f, 0x3f, 0x8f, 0xff, 0xff, 0xff, 0xe0, 0x00,
    0x00, 0x07, 0xff, 0xff, 0xff, 0xe7, 0xe7, 0x99, 0x9f, 0x3f, 0x9f, 0xff, 0xff, 0xff, 0xe0, 0x00,
    0x00, 0x07, 0xff, 0xff, 0xff, 0xe7, 0xe7, 0x19, 0x8f, 0x3f, 0x9f, 0xff, 0xff, 0xff, 0xe0, 0x00,
    0x00, 0x07, 0xff, 0xff, 0xff, 0xe7, 0xf0, 0x39, 0xcf, 0x3f, 0x9f, 0xff, 0xff, 0xff, 0xe0, 0x00,
    0x00, 0x07, 0xff, 0xff, 0xff, 0xe7, 0xf8, 0x79, 0xc7, 0x3f, 0x9f, 0xff, 0xff, 0xff, 0xe0, 0x00,
    0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00,
    0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00,
    0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00,
    0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00,
    0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00,
    0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00,
    0x00, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xc0, 0x00,
    0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00,
    0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x60, 0x00, 0x60, 0x00,
    0x00, 0x06, 0x00, 0x01, 0xf1, 0xc7, 0x71, 0xf1, 0xcf, 0x06, 0x7c, 0x3c, 0x60, 0x00, 0x60, 0x00,
    0x00, 0x06, 0x00, 0x03, 0xf9, 0xc7, 0x73, 0xf9, 0xce, 0x0c, 0xfe, 0x7e, 0x60, 0x00, 0x60, 0x00,
    0x00, 0x06, 0x00, 0x03, 0x9d, 0xc7, 0x73, 0x9d, 0xdc, 0x0c, 0xee, 0xe6, 0x40, 0x00, 0x60, 0x00,
    0x00, 0x06, 0x00, 0x03, 0x1d, 0xc7, 0x77, 0x1d, 0xdc, 0x00, 0xce, 0xe7, 0x00, 0x00, 0x60, 0x00,
    0x00, 0x06, 0x00, 0x07, 0x0d, 0xc7, 0x77, 0x0d, 0xf8, 0x00, 0x0e, 0x06, 0x00, 0x00, 0x60, 0x00,
    0x00, 0x06, 0x00, 0x07, 0x0d, 0xc7, 0x77, 0x01, 0xf8, 0x00, 0x0e, 0x0e, 0x00, 0x00, 0x60, 0x00,
    0x00, 0x06, 0x00, 0x07, 0x0d, 0xc7, 0x77, 0x01, 0xf8, 0x00, 0x1c, 0x0c, 0x00, 0x00, 0x60, 0x00,
    0x00, 0x06, 0x00, 0x07, 0x0d, 0xc7, 0x77, 0x01, 0xfc, 0x00, 0x38, 0x1c, 0x00, 0x00, 0x60, 0x00,
    0x00, 0x06, 0x00, 0x03, 0x1d, 0xc7, 0x77, 0x1d, 0xdc, 0x00, 0x70, 0x38, 0x00, 0x00, 0x60, 0x00,
    0x00, 0x06, 0x00, 0x03, 0x9c, 0xe7, 0x73, 0x9d, 0xde, 0x00, 0x70, 0x70, 0x00, 0x00, 0x60, 0x00,
    0x00, 0x06, 0x00, 0x03, 0xf8, 0xfe, 0x73, 0xf9, 0xce, 0x00, 0xfe, 0xff, 0x00, 0x00, 0x60, 0x00,
    0x00, 0x06, 0x00, 0x01, 0xf8, 0x7c, 0x71, 0xf1, 0xcf, 0x00, 0xfe, 0xff, 0x00, 0x00, 0x60, 0x00,
    0x00, 0x06, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00,
    0x00, 0x03, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00,
    0x00, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xc0, 0x00,
    0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00,
    0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

void updateGameSelectionScreen();
void updatePlayerSelectionScreen();
void updateDisplay();
void updateLEDsBasedOnScore(int score);
void startGame();
void playGameRound(int winningScore);
void displayWinner(int winningPlayer);
bool checkButtonPress(int buttonPin);

void setup() {
  Serial.begin(9600);

  pinMode(BUTTON_MINUS_1, INPUT_PULLUP);
  pinMode(BUTTON_PLUS_1, INPUT_PULLUP);
  pinMode(BUTTON_PLUS_3, INPUT_PULLUP);
  pinMode(BUTTON_PLUS_5, INPUT_PULLUP);
  pinMode(BUTTON_NEXT, INPUT_PULLUP);

  if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
    Serial.println(F("SSD1306 allocation failed"));
    for (;;);
  }
  display.display();
  display.clearDisplay();

  updateGameSelectionScreen();
}

void loop() {
  if (!gameSelected) {
    if (checkButtonPress(BUTTON_MINUS_1)) {
      selectedGame = (selectedGame == GAME_40_POINTS) ? GAME_22_POINTS : GAME_40_POINTS;
      updateGameSelectionScreen();
    }
    if (checkButtonPress(BUTTON_PLUS_1)) {
      selectedGame = (selectedGame == GAME_40_POINTS) ? GAME_22_POINTS : GAME_40_POINTS;
      updateGameSelectionScreen();
    }
    if (checkButtonPress(BUTTON_NEXT)) {
      gameSelected = true;
      updatePlayerSelectionScreen();
    }
  } else {
    if (checkButtonPress(BUTTON_MINUS_1)) {
      numberOfPlayers = max(1, numberOfPlayers - 1);
      updatePlayerSelectionScreen();
    }
    if (checkButtonPress(BUTTON_PLUS_1)) {
      numberOfPlayers = min(8, numberOfPlayers + 1);
      updatePlayerSelectionScreen();
    }
    if (checkButtonPress(BUTTON_NEXT)) {
      startGame();
    }
  }
}

bool checkButtonPress(int buttonPin) {
  if (digitalRead(buttonPin) == LOW) {
    delay(200);
    return true;
  }
  return false;
}

void startGame() {
  if (selectedGame == GAME_40_POINTS) {
    playGameRound(40);
  } else if (selectedGame == GAME_22_POINTS) {
    playGameRound(22);
  }
}

void playGameRound(int winningScore) {
  bool extraTurnRequired = false;
  bool shootout = false;
  int turnCounter[8] = {0};
  int shootoutPlayers[8] = {0};

  while (!gameOver) {
    for (int i = 0; i < numberOfPlayers; i++) {
      currentPlayer = i + 1;
      if (playerScores[currentPlayer - 1] == -100) continue; // Skip eliminated players
      int playerScore = playerScores[currentPlayer - 1];
      turnCounter[currentPlayer - 1]++;

      while (true) {
        display.clearDisplay();
        display.setTextSize(2);
        display.setTextColor(SSD1306_WHITE);
        display.setCursor(0, 10);
        display.print("PLAYER ");
        display.print(currentPlayer);
        display.setCursor(0, 30);
        display.print("Score: ");
        display.print(playerScore);
        display.display();

        updateLEDsBasedOnScore(playerScore);

        if (checkButtonPress(BUTTON_MINUS_1)) playerScore--;
        if (checkButtonPress(BUTTON_PLUS_1)) playerScore++;
        if (checkButtonPress(BUTTON_PLUS_3)) playerScore += 3;
        if (checkButtonPress(BUTTON_PLUS_5)) playerScore += 5;

        if (checkButtonPress(BUTTON_NEXT)) {
          if (playerScore < -10) {
            playerScores[currentPlayer - 1] = -100; // Mark player as eliminated
          } else {
            playerScores[currentPlayer - 1] = playerScore; // Update player's score
          }
          break;
        }
      }

      if (playerScores[currentPlayer - 1] >= winningScore) {
        extraTurnRequired = true;
      }
    }

    if (extraTurnRequired) {
      for (int i = 0; i < numberOfPlayers; i++) {
        if (turnCounter[i] == turnCounter[currentPlayer - 1] - 1) {
          currentPlayer = i + 1;
          int playerScore = playerScores[currentPlayer - 1];

          while (true) {
            display.clearDisplay();
            display.setTextSize(2);
            display.setTextColor(SSD1306_WHITE);
            display.setCursor(0, 10);
            display.print("PLAYER ");
            display.print(currentPlayer);
            display.setCursor(0, 30);
            display.print("Score: ");
            display.print(playerScore);
            display.display();

            updateLEDsBasedOnScore(playerScore);

            if (checkButtonPress(BUTTON_MINUS_1)) playerScore--;
            if (checkButtonPress(BUTTON_PLUS_1)) playerScore++;
            if (checkButtonPress(BUTTON_PLUS_3)) playerScore += 3;
            if (checkButtonPress(BUTTON_PLUS_5)) playerScore += 5;

            if (checkButtonPress(BUTTON_NEXT)) {
              if (playerScore < -10) {
                playerScores[currentPlayer - 1] = -100; // Mark player as eliminated
              } else {
                playerScores[currentPlayer - 1] = playerScore; // Update player's score
              }
              break;
            }
          }
        }
      }
      extraTurnRequired = false;
    }

    int winners = 0, highestScore = -1, winningPlayer = 0;
    for (int i = 0; i < numberOfPlayers; i++) {
      if (playerScores[i] >= winningScore) {
        winners++;
        if (playerScores[i] > highestScore) {
          highestScore = playerScores[i];
          winningPlayer = i + 1;
        }
        if (playerScores[i] == highestScore) {
          shootout = true;
          shootoutPlayers[i] = 1;
        } else {
          shootout = false;
          shootoutPlayers[i] = 0;
        }
      }
    }

    if (winners > 1) {
      if (shootout) {
        int maxScore = -1;
        bool tie = false;

        while (true) {
          display.clearDisplay();
          display.setTextSize(1);
          display.setTextColor(SSD1306_WHITE);
          display.setCursor(0, 10);
          display.print("Shootout Round");
          display.display();

          for (int i = 0; i < numberOfPlayers; i++) {
            if (shootoutPlayers[i] == 1) {
              currentPlayer = i + 1;
              int playerScore = playerScores[currentPlayer - 1];

              while (true) {
                display.clearDisplay();
                display.setTextSize(2);
                display.setTextColor(SSD1306_WHITE);
                display.setCursor(0, 10);
                display.print("PLAYER ");
                display.print(currentPlayer);
                display.setCursor(0, 30);
                display.print("Score: ");
                display.print(playerScore);
                display.display();

                if (checkButtonPress(BUTTON_MINUS_1)) playerScore--;
                if (checkButtonPress(BUTTON_PLUS_1)) playerScore++;
                if (checkButtonPress(BUTTON_PLUS_3)) playerScore += 3;
                if (checkButtonPress(BUTTON_PLUS_5)) playerScore += 5;

                if (checkButtonPress(BUTTON_NEXT)) {
                  playerScores[currentPlayer - 1] = playerScore;
                  break;
                }
              }

              if (playerScore > maxScore) {
                maxScore = playerScore;
                winningPlayer = currentPlayer;
                tie = false;
              } else if (playerScore == maxScore) {
                tie = true;
              }
            }
          }

          if (!tie) {
            gameOver = true;
            displayWinner(winningPlayer);
            return;
          }
        }
      } else {
        gameOver = true;
        displayWinner(winningPlayer);
        return;
      }
    }

    display.clearDisplay();
    display.setTextSize(1);
    display.setTextColor(SSD1306_WHITE);
    display.setCursor(0, 10);
    display.println("ROUND COMPLETED");
    display.display();
    delay(2000);
  }
}

void displayWinner(int winningPlayer) {
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(0, 10);
  display.print("PLAYER ");
  display.print(winningPlayer);
  display.println(" WINS!");
  display.display();
  delay(2000);
}

void updateDisplay() {
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(0, 10);
  display.print("Game Mode: ");
  display.println(selectedGame == GAME_40_POINTS ? "40 Points" : "22 Points");
  display.print("Number of Players: ");
  display.println(numberOfPlayers);
  display.display();
}

void updateLEDsBasedOnScore(int score) {
  uint32_t color;
  if (score <= 10) {
    color = strip.Color(255, 0, 0);
  } else if (score <= 20) {
    color = strip.Color(0, 255, 0);
  } else {
    color = strip.Color(0, 0, 255);
  }

  for (int i = 0; i < strip.numPixels(); i++) {
    strip.setPixelColor(i, color);
  }
  strip.show();
}

void updateGameSelectionScreen() {
  display.clearDisplay();

  // Display the bitmap image for the selected game
  if (selectedGame == GAME_22_POINTS) {
    display.drawBitmap(0, 0, epd_bitmap_gameMode22, 128, 64, SSD1306_WHITE);
  } else {
    display.drawBitmap(0, 0, epd_bitmap_gameMode40, 128, 64, SSD1306_WHITE);
  }

  // Display text on top of the bitmap
  display.setTextSize(1);
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(0, 10);
  display.println();
  display.display();
}

void updatePlayerSelectionScreen() {
  display.clearDisplay();
  display.setTextSize(2);
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(0, 10);
  display.println("Select Players");
  display.setTextSize(1);
  display.setCursor(0, 30);
  display.print("> ");
  display.print(numberOfPlayers);
  display.println(" Players");
  display.display();
}

	
